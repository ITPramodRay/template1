{"ast":null,"code":"import crypto from \"crypto\";\nimport { isType } from \"../utils\";\nexport class AES_CORE {\n  constructor(_data, params) {\n    this.encrypt = () => {\n      const iv = crypto.randomBytes(this.ivLength);\n      const cipher = crypto.createCipheriv(this.algorithm, this.key, iv);\n      let cipherText = cipher.update(JSON.stringify(this.data), \"utf-8\");\n      cipherText = Buffer.concat([cipherText, cipher.final()]);\n      const tag = cipher.getAuthTag();\n      const encryptedData = Buffer.concat([iv, cipherText, tag]);\n      return encryptedData.toString(this.format);\n    };\n\n    this.decrypt = () => {\n      const encryptedBuffer = Buffer.from(this.data, this.format);\n      const iv = encryptedBuffer.slice(0, this.ivLength);\n      const cipherText = encryptedBuffer.slice(this.ivLength, -this.tagLength);\n      const tag = encryptedBuffer.slice(-this.tagLength);\n      const decipher = crypto.createDecipheriv(this.algorithm, this.key, iv);\n      decipher.setAuthTag(tag);\n      let data = decipher.update(cipherText, \"base64\", \"utf8\");\n      data += decipher.final(\"utf8\");\n      return typeof data === \"string\" ? JSON.parse(data) : data;\n    };\n\n    this.staticDecrypt = flag => {\n      if (flag === null || flag === undefined || flag === \"\") {\n        return null;\n      } else {\n        let decKey = this.key;\n\n        if (flag === \"Life99\") {\n          decKey = process.env.REACT_APP_ENCRYPT_KEY_LIFE99;\n        }\n\n        const encryptedBuffer = Buffer.from(this.data, this.format);\n        const iv = encryptedBuffer.slice(0, this.ivLength);\n        const cipherText = encryptedBuffer.slice(this.ivLength, -this.tagLength);\n        const tag = encryptedBuffer.slice(-this.tagLength);\n        const decipher = crypto.createDecipheriv(this.algorithm, decKey, iv);\n        decipher.setAuthTag(tag);\n        let data = decipher.update(cipherText, \"base64\", \"utf8\");\n        data += decipher.final(\"utf8\");\n        return typeof data === \"string\" ? JSON.parse(data) : data;\n      }\n    };\n\n    this.algorithm = \"aes-256-gcm\";\n    this.ivLength = 12;\n    this.tagLength = 16;\n    this.format = \"base64\";\n    this.data = (_data === null || _data === void 0 ? void 0 : _data.payload) || _data;\n    this.key = process.env.REACT_APP_LOCAL_ENCRYPT_KEY;\n    this.encrypt = this.encrypt.bind(this);\n    this.decrypt = this.decrypt.bind(this);\n\n    if (params === null || params === undefined || params === \"\") {\n      let localConf = sessionStorage._configs || \"\";\n\n      if (localConf.length > 0) {\n        try {\n          localConf = window.atob(localConf);\n          localConf = JSON.parse(localConf);\n        } catch (err) {\n          localConf = {};\n        }\n      }\n\n      const {\n        source,\n        product\n      } = localConf;\n\n      if (source !== undefined && product !== undefined) {\n        this.key = process.env[`REACT_APP_ENCRYPT_KEY_${product}_${source}`];\n      } else if (source !== undefined && product === undefined) {\n        this.key = process.env[`REACT_APP_ENCRYPT_KEY_${source}_OPEN`];\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/sv/HDFCLife99/adcat-frontend-react-template/src/modules/crypto.js"],"names":["crypto","isType","AES_CORE","constructor","data","params","encrypt","iv","randomBytes","ivLength","cipher","createCipheriv","algorithm","key","cipherText","update","JSON","stringify","Buffer","concat","final","tag","getAuthTag","encryptedData","toString","format","decrypt","encryptedBuffer","from","slice","tagLength","decipher","createDecipheriv","setAuthTag","parse","staticDecrypt","flag","undefined","decKey","process","env","REACT_APP_ENCRYPT_KEY_LIFE99","payload","REACT_APP_LOCAL_ENCRYPT_KEY","bind","localConf","sessionStorage","_configs","length","window","atob","err","source","product"],"mappings":"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","sourcesContent":["import crypto from \"crypto\";\nimport { isType } from \"../utils\";\nexport class AES_CORE {\n  constructor(data, params) {\n    this.algorithm = \"aes-256-gcm\";\n    this.ivLength = 12;\n    this.tagLength = 16;\n    this.format = \"base64\";\n    this.data = data?.payload || data;\n    this.key = process.env.REACT_APP_LOCAL_ENCRYPT_KEY;\n    this.encrypt = this.encrypt.bind(this);\n    this.decrypt = this.decrypt.bind(this);\n    if (params === null || params === undefined || params === \"\") {\n      let localConf = sessionStorage._configs || \"\";\n      if (localConf.length > 0) {\n        try {\n          localConf = window.atob(localConf);\n          localConf = JSON.parse(localConf);\n        } catch (err) {\n          localConf = {};\n        }\n      }\n      const { source, product } = localConf;\n      if (source !== undefined && product !== undefined) {\n        this.key = process.env[`REACT_APP_ENCRYPT_KEY_${product}_${source}`];\n      } else if (source !== undefined && product === undefined) {\n        this.key = process.env[`REACT_APP_ENCRYPT_KEY_${source}_OPEN`];\n      }\n    }\n  }\n  encrypt = () => {\n    const iv = crypto.randomBytes(this.ivLength);\n    const cipher = crypto.createCipheriv(this.algorithm, this.key, iv);\n    let cipherText = cipher.update(JSON.stringify(this.data), \"utf-8\");\n    cipherText = Buffer.concat([cipherText, cipher.final()]);\n    const tag = cipher.getAuthTag();\n    const encryptedData = Buffer.concat([iv, cipherText, tag]);\n    return encryptedData.toString(this.format);\n  };\n  decrypt = () => {\n    const encryptedBuffer = Buffer.from(this.data, this.format);\n    const iv = encryptedBuffer.slice(0, this.ivLength);\n    const cipherText = encryptedBuffer.slice(this.ivLength, -this.tagLength);\n    const tag = encryptedBuffer.slice(-this.tagLength);\n    const decipher = crypto.createDecipheriv(this.algorithm, this.key, iv);\n    decipher.setAuthTag(tag);\n    let data = decipher.update(cipherText, \"base64\", \"utf8\");\n    data += decipher.final(\"utf8\");\n    return typeof data === \"string\" ? JSON.parse(data) : data;\n  };\n  staticDecrypt = (flag) => {\n    if (flag === null || flag === undefined || flag === \"\") {\n      return null;\n    } else {\n      let decKey = this.key;\n\n      if (flag === \"Life99\") {\n        decKey = process.env.REACT_APP_ENCRYPT_KEY_LIFE99;\n      }\n      const encryptedBuffer = Buffer.from(this.data, this.format);\n      const iv = encryptedBuffer.slice(0, this.ivLength);\n      const cipherText = encryptedBuffer.slice(this.ivLength, -this.tagLength);\n      const tag = encryptedBuffer.slice(-this.tagLength);\n      const decipher = crypto.createDecipheriv(this.algorithm, decKey, iv);\n\n      decipher.setAuthTag(tag);\n      let data = decipher.update(cipherText, \"base64\", \"utf8\");\n      data += decipher.final(\"utf8\");\n      return typeof data === \"string\" ? JSON.parse(data) : data;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}